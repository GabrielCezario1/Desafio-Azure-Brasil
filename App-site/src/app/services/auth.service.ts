import { Injectable, inject } from '@angular/core';
import { MsalService, MsalBroadcastService } from '@azure/msal-angular';
import { AccountInfo, InteractionStatus } from '@azure/msal-browser';
import { BehaviorSubject, filter, Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';
export interface UserInfo {
  id: string;
  email: string;
  name: string;
  displayName: string;
  tenantId?: string;
  environment?: string;
  homeAccountId?: string;
}

@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private msalService = inject(MsalService);
  private msalBroadcastService = inject(MsalBroadcastService);

  private isLoggedInSubject = new BehaviorSubject<boolean>(false);
  private userAccountSubject = new BehaviorSubject<AccountInfo | null>(null);

  public isLoggedIn$ = this.isLoggedInSubject.asObservable();
  public userAccount$ = this.userAccountSubject.asObservable();

  constructor() {
    this.initializeAuth();
  }

  private initializeAuth() {
    this.msalBroadcastService.inProgress$
      .pipe(filter((status: InteractionStatus) => status === InteractionStatus.None))
      .subscribe(() => {
        this.setLoginDisplay();
      });
  }

  private setLoginDisplay() {
    const accounts = this.msalService.instance.getAllAccounts();
    const isLoggedIn = accounts.length > 0;
    
    this.isLoggedInSubject.next(isLoggedIn);
    
    if (isLoggedIn) {
      const account = accounts[0];
      this.userAccountSubject.next(account);
      this.msalService.instance.setActiveAccount(account);
    } else {
      this.userAccountSubject.next(null);
    }
  }

  login() {
    console.log('üîê AuthService: Iniciando processo de login...');
    
    // Verificar se MSAL est√° inicializado
    const isInitialized = this.msalService.instance.getConfiguration();
    if (!isInitialized) {
      console.error('‚ùå AuthService: MSAL n√£o inicializado');
      return throwError(() => new Error('MSAL n√£o est√° inicializado. Aguarde alguns segundos e tente novamente.'));
    }

    console.log('‚úÖ AuthService: MSAL inicializado, prosseguindo com login');
    
    return this.msalService.loginPopup({
      scopes: ['User.Read'] 
    });
  }

  logout() {
    return this.msalService.logoutPopup();
  }

  // üé´ M√âTODOS DE TOKEN AVAN√áADOS

  /**
   * üé´ OBTER TOKEN DE ACESSO
   * 
   * Obt√©m token de acesso para chamadas de API com scopes espec√≠ficos
   * Tenta token silencioso primeiro, fallback para popup se necess√°rio
   * 
   * @param scopes - Array de scopes necess√°rios (padr√£o: ['User.Read'])
   * @returns Observable<string> - Access token
   */
  getAccessToken(scopes: string[] = ['User.Read']): Observable<string> {
    console.log('üé´ AuthService: Obtendo access token para scopes:', scopes);
    
    const account = this.msalService.instance.getActiveAccount();
    
    if (!account) {
      console.error('üé´ AuthService: Nenhuma conta ativa encontrada');
      return throwError(() => new Error('Nenhuma conta ativa encontrada. Fa√ßa login primeiro.'));
    }

    console.log('üé´ AuthService: Tentando token silencioso para conta:', account.username);

    return this.msalService.acquireTokenSilent({
      scopes,
      account
    }).pipe(
      map(result => {
        console.log('üé´ AuthService: Token silencioso obtido com sucesso');
        return result.accessToken;
      }),
      catchError(error => {
        console.warn('üé´ AuthService: Token silencioso falhou, tentando popup:', error);
        
        return this.msalService.acquireTokenPopup({
          scopes,
          account
        }).pipe(
          map(result => {
            console.log('üé´ AuthService: Token popup obtido com sucesso');
            return result.accessToken;
          }),
          catchError(popupError => {
            console.error('üé´ AuthService: Falha total ao obter token:', popupError);
            return throwError(() => new Error('N√£o foi poss√≠vel obter token de acesso.'));
          })
        );
      })
    );
  }

  /**
   * üîç VERIFICAR SE H√Å TOKEN V√ÅLIDO
   * 
   * Verifica se existe um token v√°lido em cache para os scopes especificados
   * 
   * @param scopes - Array de scopes para verificar
   * @returns boolean - true se h√° token v√°lido
   */
  hasValidToken(scopes: string[] = ['User.Read']): boolean {
    const account = this.msalService.instance.getActiveAccount();
    
    if (!account) {
      return false;
    }

    try {
      // Verifica se h√° token no cache
      const tokenCache = this.msalService.instance.getTokenCache();
      const silentRequest = {
        scopes,
        account,
        forceRefresh: false
      };
      
      // Esta √© uma verifica√ß√£o b√°sica - em produ√ß√£o voc√™ pode usar m√©todos mais espec√≠ficos
      return true; // Por simplicidade, assumimos que se h√° conta ativa, h√° token v√°lido
    } catch (error) {
      console.warn('üîç AuthService: Erro ao verificar token v√°lido:', error);
      return false;
    }
  }

  // üë§ M√âTODOS DE INFORMA√á√ïES DO USU√ÅRIO

  /**
   * üë§ OBTER INFORMA√á√ïES DO USU√ÅRIO
   * 
   * Extrai e formata informa√ß√µes do usu√°rio logado de forma amig√°vel
   * 
   * @returns UserInfo | null - Informa√ß√µes formatadas do usu√°rio ou null se n√£o logado
   */
  getUserInfo(): UserInfo | null {
    const account = this.userAccount;
    
    if (!account) {
      console.log('üë§ AuthService: Nenhum usu√°rio logado');
      return null;
    }

    const userInfo: UserInfo = {
      id: account.localAccountId || account.homeAccountId || '',
      email: account.username || '',
      name: account.name || account.username || '',
      displayName: account.name || account.username || 'Usu√°rio',
      tenantId: account.tenantId,
      environment: account.environment,
      homeAccountId: account.homeAccountId
    };

    console.log('üë§ AuthService: Informa√ß√µes do usu√°rio obtidas:', userInfo.displayName);
    return userInfo;
  }

  /**
   * üìã OBTER INFORMA√á√ïES COMPLETAS DA CONTA
   * 
   * Retorna o objeto AccountInfo completo do MSAL
   * 
   * @returns AccountInfo | null - Informa√ß√µes completas da conta
   */
  getAccountInfo(): AccountInfo | null {
    return this.userAccount;
  }

  /**
   * üè∑Ô∏è OBTER CLAIMS DO TOKEN
   * 
   * Extrai claims/informa√ß√µes do ID token do usu√°rio
   * 
   * @returns any | null - Claims do token ou null
   */
  getTokenClaims(): any | null {
    const account = this.userAccount;
    
    if (!account || !account.idTokenClaims) {
      console.log('üè∑Ô∏è AuthService: Nenhum claim de token dispon√≠vel');
      return null;
    }

    console.log('üè∑Ô∏è AuthService: Claims do token obtidos');
    return account.idTokenClaims;
  }

  // üîç M√âTODOS DE VERIFICA√á√ÉO DE SESS√ÉO

  /**
   * üîç VERIFICAR SE SESS√ÉO EST√Å ATIVA
   * 
   * Verifica se existe uma sess√£o v√°lida ativa com informa√ß√µes essenciais
   * 
   * @returns boolean - true se sess√£o est√° ativa e v√°lida
   */
  isSessionActive(): boolean {
    const accounts = this.msalService.instance.getAllAccounts();
    const hasAccounts = accounts.length > 0;
    const hasActiveAccount = this.msalService.instance.getActiveAccount() !== null;
    
    const isActive = hasAccounts && hasActiveAccount;
    console.log('üîç AuthService: Verifica√ß√£o de sess√£o ativa:', isActive);
    
    return isActive;
  }

  /**
   * ‚è∞ VERIFICAR SE TOKEN EST√Å EXPIRADO
   * 
   * Verifica se os tokens atuais est√£o pr√≥ximos do vencimento
   * 
   * @returns boolean - true se token est√° expirado ou pr√≥ximo do vencimento
   */
  isTokenExpired(): boolean {
    const account = this.userAccount;
    
    if (!account || !account.idTokenClaims) {
      return true;
    }

    // Verifica expira√ß√£o do ID token
    const exp = account.idTokenClaims['exp'];
    if (exp) {
      const expirationTime = exp * 1000; // Converter para milliseconds
      const now = Date.now();
      const isExpired = now >= expirationTime;
      
      console.log('‚è∞ AuthService: Token expiration check:', isExpired);
      return isExpired;
    }

    return false;
  }

  // üîß M√âTODOS UTILIT√ÅRIOS

  /**
   * üîÑ REFRESH TOKEN
   * 
   * For√ßa a renova√ß√£o do token de acesso
   * 
   * @param scopes - Scopes para renovar
   * @returns Observable<string> - Novo access token
   */
  refreshToken(scopes: string[] = ['User.Read']): Observable<string> {
    console.log('üîÑ AuthService: For√ßando refresh do token');
    
    const account = this.msalService.instance.getActiveAccount();
    
    if (!account) {
      return throwError(() => new Error('Nenhuma conta ativa para refresh'));
    }

    return this.msalService.acquireTokenSilent({
      scopes,
      account,
      forceRefresh: true // For√ßa renova√ß√£o
    }).pipe(
      map(result => {
        console.log('üîÑ AuthService: Token renovado com sucesso');
        return result.accessToken;
      }),
      catchError(error => {
        console.error('üîÑ AuthService: Erro ao renovar token:', error);
        return throwError(() => new Error('Falha ao renovar token'));
      })
    );
  }

  /**
   * üßπ LIMPAR CACHE
   * 
   * Remove todos os tokens do cache local
   */
  clearCache(): void {
    console.log('üßπ AuthService: Limpando cache de tokens');
    
    try {
      this.msalService.instance.clearCache();
      console.log('üßπ AuthService: Cache limpo com sucesso');
    } catch (error) {
      console.error('üßπ AuthService: Erro ao limpar cache:', error);
    }
  }

  
  get isLoggedIn(): boolean {
    return this.isLoggedInSubject.value;
  }

  get userAccount(): AccountInfo | null {
    return this.userAccountSubject.value;
  }
}
