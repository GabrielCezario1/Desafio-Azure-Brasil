// ================================================================
// DESAFIO AZURE BRASIL - SERVI√áO DE AUTENTICA√á√ÉO
// REQUISITO VAGA: Implementa autentica√ß√£o com Azure Entra ID
// ================================================================

import { Injectable, inject } from '@angular/core';
import { MsalService, MsalBroadcastService } from '@azure/msal-angular';
import { AccountInfo, InteractionStatus } from '@azure/msal-browser';
import { BehaviorSubject, filter, Observable, throwError } from 'rxjs';
import { map, catchError } from 'rxjs/operators';

/**
 * Interface para informa√ß√µes do usu√°rio autenticado
 * REQUISITO VAGA: Estrutura para exibir nome e informa√ß√µes do usu√°rio
 */
export interface UserInfo {
  id: string;
  email: string;
  name: string;
  displayName: string;
  tenantId?: string;          // REQUISITO: ID do Tenant
  environment?: string;
  homeAccountId?: string;
}

/**
 * SERVI√áO PRINCIPAL DE AUTENTICA√á√ÉO AZURE ENTRA ID
 * REQUISITO VAGA: Implementa autentica√ß√£o completa com Azure Entra ID
 * 
 * Funcionalidades implementadas:
 * - Login/logout com popup
 * - Gerenciamento de tokens de acesso
 * - Observables para estado de autentica√ß√£o
 * - Valida√ß√£o de sess√£o e tokens
 */
@Injectable({
  providedIn: 'root'
})
export class AuthService {
  // Inje√ß√£o de depend√™ncias MSAL
  private msalService = inject(MsalService);
  private msalBroadcastService = inject(MsalBroadcastService);

  // Subjects para gerenciar estado reativo da autentica√ß√£o
  private isLoggedInSubject = new BehaviorSubject<boolean>(false);
  private userAccountSubject = new BehaviorSubject<AccountInfo | null>(null);

  // Observables p√∫blicos para componentes consumirem
  public isLoggedIn$ = this.isLoggedInSubject.asObservable();
  public userAccount$ = this.userAccountSubject.asObservable();

  constructor() {
    this.initializeAuth();
  }

  /**
   * Inicializa o sistema de autentica√ß√£o
   * Monitora mudan√ßas no status de intera√ß√£o do MSAL
   */
  private initializeAuth() {
    this.msalBroadcastService.inProgress$
      .pipe(filter((status: InteractionStatus) => status === InteractionStatus.None))
      .subscribe(() => {
        this.setLoginDisplay();
      });
  }

  /**
   * Atualiza o estado de login baseado nas contas dispon√≠veis
   * Configura a conta ativa se usu√°rio estiver logado
   */
  private setLoginDisplay() {
    const accounts = this.msalService.instance.getAllAccounts();
    const isLoggedIn = accounts.length > 0;
    
    this.isLoggedInSubject.next(isLoggedIn);
    
    if (isLoggedIn) {
      const account = accounts[0];
      this.userAccountSubject.next(account);
      this.msalService.instance.setActiveAccount(account);
    } else {
      this.userAccountSubject.next(null);
    }
  }

  /**
   * REQUISITO VAGA: Realiza login com Azure Entra ID
   * Utiliza popup para autentica√ß√£o interativa
   * @returns Observable do resultado do login
   */
  login() {
    const isInitialized = this.msalService.instance.getConfiguration();
    if (!isInitialized) {
      console.error('‚ùå AuthService: MSAL n√£o inicializado');
      return throwError(() => new Error('MSAL n√£o est√° inicializado. Aguarde alguns segundos e tente novamente.'));
    }

    return this.msalService.loginPopup({
      scopes: ['User.Read'] 
    });
  }

  /**
   * Realiza logout do Azure Entra ID
   * Limpa tokens e sess√£o local
   * @returns Observable do resultado do logout
   */
  logout() {
    return this.msalService.logoutPopup();
  }

  /**
   * REQUISITO VAGA: Obt√©m token de acesso para Microsoft Graph API
   * Estrat√©gia: Tenta silent first, fallback para popup
   * Usado para acessar informa√ß√µes do usu√°rio e tenant
   * @param scopes Array de permiss√µes necess√°rias
   * @returns Observable com o access token
   */
  getAccessToken(scopes: string[] = ['User.Read']): Observable<string> {
    
    const account = this.msalService.instance.getActiveAccount();
    
    if (!account) {
      console.error('üé´ AuthService: Nenhuma conta ativa encontrada');
      return throwError(() => new Error('Nenhuma conta ativa encontrada. Fa√ßa login primeiro.'));
    }

    // Primeira tentativa: aquisi√ß√£o silenciosa de token
    return this.msalService.acquireTokenSilent({
      scopes,
      account
    }).pipe(
      map(result => {
        return result.accessToken;
      }),
      catchError(error => {
        console.warn('üé´ AuthService: Token silencioso falhou, tentando popup:', error);
        
        // Segunda tentativa: popup interativo
        return this.msalService.acquireTokenPopup({
          scopes,
          account
        }).pipe(
          map(result => {
            return result.accessToken;
          }),
          catchError(popupError => {
            console.error('üé´ AuthService: Falha total ao obter token:', popupError);
            return throwError(() => new Error('N√£o foi poss√≠vel obter token de acesso.'));
          })
        );
      })
    );
  }

  /**
   * Verifica se existe um token v√°lido em cache
   * @param scopes Escopos para validar
   * @returns true se token v√°lido existe
   */
  hasValidToken(scopes: string[] = ['User.Read']): boolean {
    const account = this.msalService.instance.getActiveAccount();
    
    if (!account) {
      return false;
    }

    try {
      const tokenCache = this.msalService.instance.getTokenCache();
      const silentRequest = {
        scopes,
        account,
        forceRefresh: false
      };
      
      return true; 
    } catch (error) {
      console.warn('üîç AuthService: Erro ao verificar token v√°lido:', error);
      return false;
    }
  }

  /**
   * REQUISITO VAGA: Extrai informa√ß√µes do usu√°rio autenticado
   * Retorna nome, email, tenantId conforme requisitos
   * @returns UserInfo com dados do usu√°rio ou null
   */
  getUserInfo(): UserInfo | null {
    const account = this.userAccount;
    
    if (!account) {
      console.log('üë§ AuthService: Nenhum usu√°rio logado');
      return null;
    }

    return {
      id: account.localAccountId || account.homeAccountId || '',
      email: account.username || '',
      name: account.name || account.username || '',      // REQUISITO: Nome do usu√°rio
      displayName: account.name || account.username || 'Usu√°rio',
      tenantId: account.tenantId,                        // REQUISITO: ID do Tenant
      environment: account.environment,
      homeAccountId: account.homeAccountId
    };
  }

  /**
   * Retorna informa√ß√µes da conta MSAL ativa
   * @returns AccountInfo ou null
   */
  getAccountInfo(): AccountInfo | null {
    return this.userAccount;
  }

  /**
   * Extrai claims do token ID para an√°lise detalhada
   * @returns Claims do token ou null
   */
  getTokenClaims(): any | null {
    const account = this.userAccount;
    
    if (!account || !account.idTokenClaims) {
      console.log('üè∑Ô∏è AuthService: Nenhum claim de token dispon√≠vel');
      return null;
    }

    return account.idTokenClaims;
  }

  /**
   * Verifica se a sess√£o est√° ativa
   * @returns true se sess√£o v√°lida
   */
  isSessionActive(): boolean {
    const accounts = this.msalService.instance.getAllAccounts();
    const hasAccounts = accounts.length > 0;
    const hasActiveAccount = this.msalService.instance.getActiveAccount() !== null;

    return hasAccounts && hasActiveAccount;
  }

  /**
   * Verifica se o token atual est√° expirado
   * @returns true se token expirado
   */
  isTokenExpired(): boolean {
    const account = this.userAccount;
    
    if (!account || !account.idTokenClaims) {
      return true;
    }

    const exp = account.idTokenClaims['exp'];
    if (exp) {
      const expirationTime = exp * 1000; 
      const now = Date.now();
      const isExpired = now >= expirationTime;
      
      console.log('‚è∞ AuthService: Token expiration check:', isExpired);
      return isExpired;
    }

    return false;
  }

  /**
   * For√ßa renova√ß√£o de token quando necess√°rio
   * @param scopes Escopos para renova√ß√£o
   * @returns Observable com novo token
   */
  refreshToken(scopes: string[] = ['User.Read']): Observable<string> {
    console.log('üîÑ AuthService: For√ßando refresh do token');
    
    const account = this.msalService.instance.getActiveAccount();
    
    if (!account) {
      return throwError(() => new Error('Nenhuma conta ativa para refresh'));
    }

    return this.msalService.acquireTokenSilent({
      scopes,
      account,
      forceRefresh: true 
    }).pipe(
      map(result => {
        return result.accessToken;
      }),
      catchError(error => {
        console.error('üîÑ AuthService: Erro ao renovar token:', error);
        return throwError(() => new Error('Falha ao renovar token'));
      })
    );
  }

  /**
   * Limpa cache de tokens localmente
   */
  clearCache(): void {
    try {
      this.msalService.instance.clearCache();
    } catch (error) {
      console.error('üßπ AuthService: Erro ao limpar cache:', error);
    }
  }

  // ================================================================
  // GETTERS PARA ACESSO DIRETO AO ESTADO
  // ================================================================

  /**
   * Getter para estado de login atual
   */
  get isLoggedIn(): boolean {
    return this.isLoggedInSubject.value;
  }

  /**
   * Getter para conta do usu√°rio atual
   */
  get userAccount(): AccountInfo | null {
    return this.userAccountSubject.value;
  }
}
